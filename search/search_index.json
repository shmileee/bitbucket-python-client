{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"General Information \u00a4 For requirements, general consideration and overview of this project, set-up information, please see our Usage guide. For detailed library documentation generated from docstrings , please see our api reference page.","title":"Home"},{"location":"#general-information","text":"For requirements, general consideration and overview of this project, set-up information, please see our Usage guide. For detailed library documentation generated from docstrings , please see our api reference page.","title":"General Information"},{"location":"license/","text":"MIT License Copyright (c) 2020 Oleksandr Ponomarov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"usage/","text":"Install using pip : pip install bitbucket-python-client Optionally set BITBUCKET_URL : export BITBUCKET_URL = https://bitbucket.company.tld Create client: from bitbucket import Bitbucket client = Bitbucket(token='MDk5MzM4NTY2ODAwOshm4zdyh0xdJ0VPR7o7zBNZcuQy') Raise pull request: client.create_pullrequest(project='AG', repository='repo1-toolkit', source_branch='develop', target_branch='master', title='My first PR', description=\"Testing\"))","title":"Usage"},{"location":"reference/api/","text":"\u00a4 Bitbucket \u00a4 Actual class for making API calls. Parameters: Name Type Description Default token str Token used to authenticate. required url str Full URL to Bitbucket server API. If not specified, environment variable BITBUCKET_URL will be used. required version str API version (1.0). required create_pullrequest ( self , project , repository , source_branch , target_branch , title , description ) \u00a4 Creates Pull Request in specified repository. Parameters: Name Type Description Default project str Bitbucket project name (can be shortened). required repository str Repository name inside aforementioned project. required source_branch str Source branch. required target_branch str Target branch. required description str Description of your Pull Request. required title str Title of your Pull Request required Source code in bitbucket/api.py def create_pullrequest ( self , project , repository , source_branch , target_branch , title , description ): \"\"\"Creates Pull Request in specified repository. Args: project (str): Bitbucket project name (can be shortened). repository (str): Repository name inside aforementioned project. source_branch (str): Source branch. target_branch (str): Target branch. description (str): Description of your Pull Request. title (str): Title of your Pull Request Returns: \"\"\" url = self . _api_url ( \"projects/ {} /repos/ {} /pull-requests\" . format ( project , repository ) ) return self . _do_requests_post ( url , { \"description\" : \" {} \" . format ( description ), \"closed\" : \"False\" , \"fromRef\" : { \"id\" : \"refs/heads/ {} \" . format ( source_branch ), \"repository\" : { \"name\" : \"null\" , \"project\" : { \"key\" : \" {} \" . format ( project )}, \"slug\" : \" {} \" . format ( repository ), }, }, \"state\" : \"OPEN\" , \"title\" : \" {} \" . format ( title ), \"locked\" : \"False\" , \"reviewers\" : [], \"open\" : \"True\" , \"toRef\" : { \"id\" : \"refs/heads/ {} \" . format ( target_branch ), \"repository\" : { \"name\" : \"null\" , \"project\" : { \"key\" : \" {} \" . format ( project )}, \"slug\" : \" {} \" . format ( repository ), }, }, }, ) . json () login ( self , token = None ) \u00a4 Logs into Bitbucket and gets a token Token should be specified Parameters: Name Type Description Default token str Token used to authenticate. None Source code in bitbucket/api.py def login ( self , token = None ): \"\"\"Logs into Bitbucket and gets a token Token should be specified Args: token (str, optional): Token used to authenticate. Returns: \"\"\" self . _token = token if token is not None : # login with token self . _auth = BitbucketAuth ( token = token ) else : # don't login return self . _token = self . _auth . token BitbucketAuth \u00a4 __init__ ( self , token = None ) special \u00a4 Helper class to store authentication token. Parameters: Name Type Description Default token str Bitbucket personal token. None Source code in bitbucket/api.py def __init__ ( self , token = None ): \"\"\"Helper class to store authentication token. Args: token (str, optional): Bitbucket personal token. \"\"\" if token is not None : self . _token = token return raise ValueError ( \"Need token for authentication\" ) parse_url ( url ) \u00a4 Parses a url into the base url and the query params Parameters: Name Type Description Default url str url with query string, or not. required Returns: Type Description (str, `dict` of `lists`) url, query (dict of values). Source code in bitbucket/api.py def parse_url ( url ): \"\"\"Parses a url into the base url and the query params Args: url (str): url with query string, or not. Returns: (str, `dict` of `lists`): url, query (dict of values). \"\"\" f = furl ( url ) query = f . args query = { a [ 0 ]: a [ 1 ] for a in query . listitems ()} f . remove ( query = True ) . path . normalize () url = f . url return url , query","title":"api.py"},{"location":"reference/api/#bitbucket.api","text":"","title":"bitbucket.api"},{"location":"reference/api/#bitbucket.api.Bitbucket","text":"Actual class for making API calls. Parameters: Name Type Description Default token str Token used to authenticate. required url str Full URL to Bitbucket server API. If not specified, environment variable BITBUCKET_URL will be used. required version str API version (1.0). required","title":"Bitbucket"},{"location":"reference/api/#bitbucket.api.Bitbucket.create_pullrequest","text":"Creates Pull Request in specified repository. Parameters: Name Type Description Default project str Bitbucket project name (can be shortened). required repository str Repository name inside aforementioned project. required source_branch str Source branch. required target_branch str Target branch. required description str Description of your Pull Request. required title str Title of your Pull Request required Source code in bitbucket/api.py def create_pullrequest ( self , project , repository , source_branch , target_branch , title , description ): \"\"\"Creates Pull Request in specified repository. Args: project (str): Bitbucket project name (can be shortened). repository (str): Repository name inside aforementioned project. source_branch (str): Source branch. target_branch (str): Target branch. description (str): Description of your Pull Request. title (str): Title of your Pull Request Returns: \"\"\" url = self . _api_url ( \"projects/ {} /repos/ {} /pull-requests\" . format ( project , repository ) ) return self . _do_requests_post ( url , { \"description\" : \" {} \" . format ( description ), \"closed\" : \"False\" , \"fromRef\" : { \"id\" : \"refs/heads/ {} \" . format ( source_branch ), \"repository\" : { \"name\" : \"null\" , \"project\" : { \"key\" : \" {} \" . format ( project )}, \"slug\" : \" {} \" . format ( repository ), }, }, \"state\" : \"OPEN\" , \"title\" : \" {} \" . format ( title ), \"locked\" : \"False\" , \"reviewers\" : [], \"open\" : \"True\" , \"toRef\" : { \"id\" : \"refs/heads/ {} \" . format ( target_branch ), \"repository\" : { \"name\" : \"null\" , \"project\" : { \"key\" : \" {} \" . format ( project )}, \"slug\" : \" {} \" . format ( repository ), }, }, }, ) . json ()","title":"create_pullrequest()"},{"location":"reference/api/#bitbucket.api.Bitbucket.login","text":"Logs into Bitbucket and gets a token Token should be specified Parameters: Name Type Description Default token str Token used to authenticate. None Source code in bitbucket/api.py def login ( self , token = None ): \"\"\"Logs into Bitbucket and gets a token Token should be specified Args: token (str, optional): Token used to authenticate. Returns: \"\"\" self . _token = token if token is not None : # login with token self . _auth = BitbucketAuth ( token = token ) else : # don't login return self . _token = self . _auth . token","title":"login()"},{"location":"reference/api/#bitbucket.api.BitbucketAuth","text":"","title":"BitbucketAuth"},{"location":"reference/api/#bitbucket.api.BitbucketAuth.__init__","text":"Helper class to store authentication token. Parameters: Name Type Description Default token str Bitbucket personal token. None Source code in bitbucket/api.py def __init__ ( self , token = None ): \"\"\"Helper class to store authentication token. Args: token (str, optional): Bitbucket personal token. \"\"\" if token is not None : self . _token = token return raise ValueError ( \"Need token for authentication\" )","title":"__init__()"},{"location":"reference/api/#bitbucket.api.parse_url","text":"Parses a url into the base url and the query params Parameters: Name Type Description Default url str url with query string, or not. required Returns: Type Description (str, `dict` of `lists`) url, query (dict of values). Source code in bitbucket/api.py def parse_url ( url ): \"\"\"Parses a url into the base url and the query params Args: url (str): url with query string, or not. Returns: (str, `dict` of `lists`): url, query (dict of values). \"\"\" f = furl ( url ) query = f . args query = { a [ 0 ]: a [ 1 ] for a in query . listitems ()} f . remove ( query = True ) . path . normalize () url = f . url return url , query","title":"parse_url()"}]}